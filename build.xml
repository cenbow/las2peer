<project name="LAS2peer" default="jars" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">
	
	<property name="ivy.organisation" value="i5" />
	<property name="ivy.module" value="las2peer" />
	<property name="ivy.revision" value="0.2" />
	<property name="ivy.build.number" value="0" />
	<property name="ivy.deliver.revision" value="${ivy.revision}" />
	<property name="ivy.pom.version" value="${ivy.revision}" />
	
	<presetdef name="javac">
		<javac includeantruntime="false" />
	</presetdef>
	
    <property name="ivy.install.version" value="2.3.0" />
    <property name="ivy.jar.dir" value="${basedir}/ivy" />
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />
    <property name="ivy.settings.file" value="${ivy.jar.dir}/ivysettings.xml" />
    <property name="ivy.dep.file" value="${ivy.jar.dir}/ivy.xml" />
	
	<property name="src.main" location="src/main/java" />
	<property name="src.junit" location="src/test/java" />
	<property name="src.help1" location="src/test_help/java" />
	<property name="src.help2" location="src/test_help2/java" />
	
	<property name="tmp" location="tmp" />
	
	<property name="tmp.classes" location="${tmp}/classes" />
	<property name="tmp.junit" location="${tmp}/test" />
	<property name="tmp.help1" location="${tmp}/test_help1" />
	<property name="tmp.help2" location="${tmp}/test_help2" />
	
    <property name="junit.report" location="${tmp}/test_reports" />
	
	<property name="export" location="export" />
	<property name="export.jars" location="${export}/jars" />
	<property name="export.doc" location="${export}/javadoc" />
	<property name="export.junitdoc" location="${export}/junitdoc" />
	
	<property name="lib" location="lib" />
	<property name="lib.cp"
		location="${lib}/i5-simpleXML-0.2.jar:${lib}/commons-codec-1.7.jar:${lib}/FreePastry-2.1.jar:${lib}/junit-4.11.jar:${lib}/xpp3-1.1.4c.jar" />
	<property name="lib.junit" location="${lib}/junit-4.11.jar:${lib}/hamcrest-core-1.3.jar" />
	
	
	<!-- Download Dependencies (IVY) -->
	
    <target name="download-ivy" unless="skip.download">
		<echo message="installing ivy..."/>
		<get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
			dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>
	
    <target name="install-ivy" depends="download-ivy" description="--> install ivy">
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>
	
    <target name="get_deps" depends="install-ivy" description="--> resolve dependencies">
        <ivy:settings>
            <!-- <credentials host="role.dbis.rwth-aachen.de:9911/archiva"  realm="Repository internal" username="" passwd=""/> -->
        </ivy:settings>
        <ivy:retrieve type="jar"/>
    </target>
	
	<target name="deploy-snapshot" depends="get_deps,jars" description="--> deploy snapshot">
		
		<property name="sn" value="${ivy.deliver.revision}-SNAPSHOT" />
		<local name="ivy.deliver.revision"/>
		<property name="ivy.deliver.revision" value="${sn}" />
		<local name="ivy.pom.version"/>
		<property name="ivy.pom.version" value="${sn}" />
		
		<ivy:makepom 
			ivyfile="${ivy.dep.file}" 
			pomfile="${export}/jars/${ivy.module}.pom" 
			artifactName="${ivy.module}"
			artifactPackaging="jar"
		/>
	
		<ivy:publish resolver="acis-snapshots"
			publishivy="false"
			overwrite="true"
			forcedeliver="true"
			status="integration">
			<artifacts pattern="${export}/jars/${ivy.module}.[ext]" />
		</ivy:publish>

	</target>

	<target name="deploy-release" depends="jars" description="--> deploy release">

		<property name="sn" value="${ivy.deliver.revision}.${ivy.build.number}" />
		<local name="ivy.deliver.revision" />
		<property name="ivy.deliver.revision" value="${sn}" />
		<local name="ivy.pom.version" />
		<property name="ivy.pom.version" value="${sn}" />

		<ivy:makepom 
			ivyfile="${ivy.dep.file}" 
			pomfile="${export}/jars/${ivy.module}.pom" 
			artifactName="${ivy.module}"
			artifactPackaging="jar"
		/>

		<ivy:publish resolver="acis-internal"
			publishivy="false"
			overwrite="true"
			forcedeliver="true"
			status="release">
			<artifacts pattern="${export}/jars/${ivy.module}.[ext]" />
		</ivy:publish>

	</target>
	
	
	<!-- Initialization -->

	<target name="init_general">
		<tstamp/>
		<mkdir dir="${tmp}" />
		<mkdir dir="${export}" />
	</target>
	
	<target name="init_compile" depends="init_general, get_deps">
		<mkdir dir="${tmp.classes}" />
		<mkdir dir="${tmp.junit}" />
		<mkdir dir="${tmp.help1}" />
		<mkdir dir="${tmp.help2}" />
	</target>
	
	<target name="init_jars" depends="init_general">
		<mkdir dir="${export.jars}" />
	</target>
	
	<target name="init_doc" depends="init_general">
		<mkdir dir="${export.doc}" />
		<mkdir dir="${export.junitdoc}" />
	</target>
	
	
	<!-- Compilation -->
	
	<target name="compile_main" depends="init_compile">
		<javac srcdir="${src.main}"
			destdir="${tmp.classes}"
			classpath="${lib.cp}"
			debug="on"
			encoding="UTF-8"
		/>
		<copy todir="${tmp.classes}">
			<fileset dir="${src.main}">
				<include name="**/*.xml" />
			</fileset>
		</copy>
	</target>
	
	<target name="compile_junit" depends="init_compile, compile_main">
		<javac srcdir="${src.junit}"
			destdir="${tmp.junit}"
			classpath="${lib.cp}:${tmp.classes}:${lib.junit}"
			debug="on"
			encoding="UTF-8"
		/>
		<copy todir="${tmp.junit}">
			<fileset dir="${src.junit}">
				<include name="**/*.xml" />
			</fileset>
		</copy>
	</target>
	
	<target name="compile_help1" depends="init_compile">
		<javac srcdir="${src.help1}"
			destdir="${tmp.help1}"
			classpath=""
			debug="on"
			encoding="UTF-8"
		/>
		<copy todir="${tmp.help1}">
			<fileset dir="${src.help1}">
				<exclude name="**/*.java" />
				<exclude name="*.java" />
			</fileset>
		</copy>
	</target>
	
	<target name="compile_help2" depends="init_compile">
		<javac srcdir="${src.help2}"
			destdir="${tmp.help2}"
			classpath=""
			debug="on"
			encoding="UTF-8"
		/>
		<copy todir="${tmp.help2}">
			<fileset dir="${src.help2}">
				<exclude name="**/*.java" />
				<exclude name="*.java" />
			</fileset>
		</copy>
	</target>
	
	<target name="compile_all" depends="compile_main, compile_junit, compile_help1, compile_help2" />
	
	
	<!-- Archives -->
	
	<target name="jar_test1-1.1" depends="init_jars, compile_help1">
		<jar jarfile="${export.jars}/i5.las2peer.classLoaders.testPackage1-1.0.jar">
			<fileset dir="${tmp.help1}">
				<include name="i5/las2peer/classLoaders/testPackage1/**/*" />
			</fileset>
			<manifest>
				<attribute name="Library-SymbolicName" value="i5.las2peer.classLoaders.testPackage1" />
				<attribute name="Library-Version" value="1.0" />
				<attribute name="Import-Bundle" value="" />
				<attribute name="Library-Name" value="JUNIT TestPackage(1)" />
				<attribute name="Library-Description" value="a simple test package" />
				<attribute name="Import-Library" value="" />
			</manifest>
		</jar>
	</target>
	
	<target name="jar_test1-1.2" depends="init_jars, compile_help2">
		<jar jarfile="${export.jars}/i5.las2peer.classLoaders.testPackage1-1.1.jar">
			<fileset dir="${tmp.help2}">
				<include name="i5/las2peer/classLoaders/testPackage1/**/*" />
			</fileset>
			<manifest>
				<attribute name="Library-SymbolicName" value="i5.las2peer.classLoaders.testPackage1" />
				<attribute name="Library-Version" value="1.1" />
				<attribute name="Import-Bundle" value="" />
				<attribute name="Library-Name" value="JUNIT TestPackage(1)" />
				<attribute name="Library-Description" value="a simple test package" />
				<attribute name="Import-Library" value="" />
			</manifest>
		</jar>
	</target>
	
	<target name="jar_test2-1.0" depends="init_jars, compile_help1">
		<jar jarfile="${export.jars}/i5.las2peer.classLoaders.testPackage2-1.0.jar">
			<fileset dir="${tmp.help1}">
				<include name="i5/las2peer/classLoaders/testPackage2/**/*" />
			</fileset>
			<manifest>
				<attribute name="Library-SymbolicName" value="i5.las2peer.classLoaders.testPackage2" />
				<attribute name="Library-Version" value="1.0" />
				<attribute name="Import-Bundle" value="" />
				<attribute name="Library-Name" value="JUNIT TestPackage(2)" />
				<attribute name="Library-Description" value="a simple test package" />
				<attribute name="Import-Library" value='i5.las2peer.classLoaders.testPackage1;version="[1.1,2.0)"' />
				<attribute name="l2p-Name" value="test2" />
				<attribute name="l2p-Version" value="1.0" />
				<attribute name="l2p-deps" value="test1-(1.1--1.2)" />
			</manifest>
		</jar>
	</target>
	
	<target name="jars" depends="main_jar, test_service_jar, test_service_helper_jar" />
	<target name="junit_jars" depends="jar_test1-1.1, jar_test1-1.2, jar_test2-1.0" />
	
	<target name="main_jar" depends="compile_all">
		<jar jarfile="${export.jars}/las2peer.jar">
			<fileset dir="${tmp.classes}">
				<exclude name="i5/las2peer/testing/services/**" />
			</fileset>
			<manifest>
				<attribute name="Main-Class" value="i5.las2peer.tools.L2pNodeLauncher"/>
				<attribute
					name="Class-Path"
					value="i5-simpleXML-0.2.jar commons-codec-1.7.jar FreePastry-2.1.jar xpp3-1.1.4c.jar"
				/>
			</manifest>
		</jar>
	</target>
	
	<target name="test_service_jar" depends="compile_main">
		<property name="testService.version" value="0.0.1" />
		<jar jarfile="${export.jars}/i5.las2peer.testing.services-${testService.version}.jar">
			<fileset dir="${tmp.classes}" includes="i5/las2peer/testing/services/*" />
			<manifest>
				<attribute name="Library-Version" value="${testService.version}" />
				<attribute name="Library-SymbolicName" value="i5.las2peer.testing.services" />
				<attribute name="Import-Library" value='test_service_helper;version="(0.0.1,1.0)"' />
			</manifest>
		</jar>
	</target>
	
	<target name="test_service_helper_jar" depends="compile_main">
		<property name="testServiceHelper.version" value="0.2" />
		<jar jarfile="${export.jars}/test_service_helper-${testServiceHelper.version}.jar">
			<fileset dir="${tmp.classes}"
				includes="i5/las2peer/testing/services/helperClasses/**" />
			<manifest>
				<attribute name="Library-Version" value="${testServiceHelper.version}" />
				<attribute name="Library-SymbolicName" value="i5.las2peer.testing.services.helperClasses" />
				<attribute name="Import-Library" value="" />
			</manifest>
		</jar>
	</target>
	
	
	<!-- Documentation -->
	
	<target name="docs" depends="java_doc, junit_doc" />
	
	<target name="java_doc" depends="init_doc">
        <javadoc destdir="${export.doc}"
			author="true"
			version="true"
			use="true"
			windowtitle="LAS2peer Documentation"
			failonerror="yes"
			encoding="utf8"
			classpath="${lib.cp}:${tmp.classes}"
         >
            <packageset dir="${src.main}" defaultexcludes="yes">
                <include name="i5/las2peer/**" />
            </packageset>		
        </javadoc>
	</target>

	<target name="junit_doc" depends="init_doc">
        <javadoc destdir="${export.junitdoc}"
			author="true"
			version="true"
			use="true"
			windowtitle="LAS2peer Unit Test Documentation"
			failonerror="yes"
			encoding="utf8"
			classpath="${lib.cp}:${tmp.classes}"
         >
        	<packageset dir="${src.junit}" defaultexcludes="yes">
				<include name="i5/las2peer/**" />
			</packageset>
		</javadoc>
	</target>
	
	
	<!-- JUnit Testing -->
	
	<target name="junit" depends="junit_tests, junit_clean" />
	
	<target name="init_junit" depends="init_general">
		<mkdir dir="${junit.report}" />
		<mkdir dir="log" />
	</target>
	
	<target name="junit_clean">
		<delete dir="${tmp.junit}" />
	</target>
	
	<target name="junit_tests" depends="init_junit, junit_jars, compile_all">
        <junit fork="yes" haltonerror="yes" haltonfailure="yes" printsummary="yes">
            <classpath>
                <pathelement path="${tmp.classes}" />
                <pathelement path="${tmp.junit}" />
                <pathelement path="${lib.cp}" />
                <pathelement path="${lib.junit}" />
            </classpath>
            <formatter type="plain" />
            <batchtest fork="yes" todir="${junit.report}">
                <fileset dir="${tmp.junit}">
                    <include name="**/*Test.class"/>
                </fileset>
            </batchtest>
        </junit>
	</target>
	
	
	<!-- Cleanup -->
	
	<target name="clean">
		<delete dir="${tmp}" />
		<delete dir="log" />
	</target>
	
	<target name="clean_deps">
		<delete dir="ivy" />
        <delete dir="${lib}" />
	</target>
	
	
	<target name="all" depends="jars, junit, docs, clean" />
	
</project>
