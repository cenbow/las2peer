<project name="las2peer" default="jars" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

	<property environment="env"/>
	
	<property name="ivy.organisation" value="i5" />
	<property name="ivy.module" value="las2peer" />
	<property name="ivy.revision" value="0.6" />
	<property name="ivy.build.number" value="8" />
	<property name="ivy.deliver.revision" value="${ivy.revision}" />
	<property name="ivy.pom.version" value="${ivy.revision}" />
	
	<condition property="ivy.las2peer.version" value="${ivy.revision}.${ivy.build.number}" else="${ivy.revision}-SNAPSHOT">
		<isset property="env.LAS2PEER_RELEASE" />
	</condition>
	
    <property name="ivy.install.version" value="2.4.0" />
    <property name="ivy.jar.dir" value="${basedir}/ivy" />
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />
    <property name="ivy.settings.file" value="${ivy.jar.dir}/ivysettings.xml" />
    <property name="ivy.dep.file" value="${ivy.jar.dir}/ivy.xml" />
	<property name="ivy.pom_template.file" value="${ivy.jar.dir}/pom_template.xml" />
	<tstamp><format property="ivy.now" pattern="yyyyMMddHHmmss" /></tstamp>
	
	<property name="src" location="src" />
	
	<property name="src.main" location="${src}/main/java" />
	<property name="src.junit" location="${src}/test/java" />
	<property name="src.help1" location="${src}/test_help/java" />
	<property name="src.help2" location="${src}/test_help2/java" />
	
	<property name="tmp" location="tmp" />
	
	<property name="tmp.classes" location="${tmp}/classes" />
	<property name="tmp.junit" location="${tmp}/test" />
	<property name="tmp.help1" location="${tmp}/test_help1" />
	<property name="tmp.help2" location="${tmp}/test_help2" />
	
    <property name="junit.report" location="${tmp}/test_reports" />
	
	<property name="export" location="export" />
	<property name="export.jars" location="${export}/jars" />
	<property name="export.doc" location="${export}/javadoc" />
	<property name="export.junitdoc" location="${export}/junitdoc" />
	
	<property name="lib.dir" value="lib" />
	<property name="lib.cp" location="${lib.dir}/FreePastry-2.1.1.jar:${lib.dir}/xpp3-1.1.4c.jar" />
	<property name="lib.junit" location="${lib.dir}/junit-4.12.jar:${lib.dir}/hamcrest-core-1.3.jar" />
	
	<property name="main-class" value="i5.las2peer.tools.L2pNodeLauncher" />
	
	<!-- external libraries classpath, we don't need sources and javadoc -->
	<path id="classpath">
		<fileset dir="${basedir}/">
			<include name="${lib.dir}/*.jar" />
			<exclude name="${lib.dir}/*sources.jar"/>
			<exclude name="${lib.dir}/*javadoc.jar"/>
		</fileset>
	</path>
	
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${ivy.jar.dir}/ant-contrib.jar"/>
		</classpath>
	</taskdef>
	
	<!-- Download Dependencies (IVY) -->
	
    <target name="download-ivy" unless="skip.download">
		<echo message="installing ivy..."/>
		<get src="http://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
			dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>
	
    <target name="install-ivy" depends="download-ivy">
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>
	
    <target name="get_deps" depends="install-ivy" description="--> resolve dependencies">
        <ivy:retrieve type="jar, bundle"/>
    </target>
	
	<target name="deploy-snapshot" depends="jars" description="--> deploy snapshot">
		
		<property name="sn" value="${ivy.deliver.revision}-SNAPSHOT" />
		<local name="ivy.deliver.revision"/>
		<property name="ivy.deliver.revision" value="${sn}" />
		<local name="ivy.pom.version"/>
		<property name="ivy.pom.version" value="${sn}" />
		
		<ivy:makepom 
			ivyfile="${ivy.dep.file}" 
			templatefile="${ivy.pom_template.file}"
			pomfile="${export}/jars/${ivy.module}.pom" 
			artifactName="${ivy.module}"
			artifactPackaging="jar"
		/>
	
		<ivy:publish resolver="acis-snapshots"
			publishivy="false"
			overwrite="true"
			forcedeliver="true"
			status="integration">
			<artifacts pattern="${export}/jars/${ivy.module}.[ext]" />
		</ivy:publish>

	</target>

	<target name="deploy-release" depends="jars" description="--> deploy release">

		<property name="sn" value="${ivy.deliver.revision}.${ivy.build.number}" />
		<local name="ivy.deliver.revision" />
		<property name="ivy.deliver.revision" value="${sn}" />
		<local name="ivy.pom.version" />
		<property name="ivy.pom.version" value="${sn}" />

		<ivy:makepom 
			ivyfile="${ivy.dep.file}" 
			pomfile="${export}/jars/${ivy.module}.pom" 
			artifactName="${ivy.module}"
			artifactPackaging="jar"
		/>

		<ivy:publish resolver="acis-internal"
			publishivy="false"
			overwrite="true"
			forcedeliver="true"
			status="release">
			<artifacts pattern="${export}/jars/${ivy.module}.[ext]" />
		</ivy:publish>

	</target>
	
	
	<!-- Initialization -->

	<target name="init_general">
		<tstamp/>
		<mkdir dir="${tmp}" />
		<mkdir dir="${export}" />
	</target>
	
	<target name="init_compile" depends="init_general, get_deps">
		<mkdir dir="${tmp.classes}" />
		<mkdir dir="${tmp.junit}" />
		<mkdir dir="${tmp.help1}" />
		<mkdir dir="${tmp.help2}" />
	</target>
	
	<target name="init_jars" depends="init_general">
		<mkdir dir="${export.jars}" />
	</target>
	
	<target name="init_doc" depends="init_general">
		<mkdir dir="${export.doc}" />
		<mkdir dir="${export.junitdoc}" />
	</target>
	
	
	<!-- Compilation -->
	
	<target name="compile_main" depends="init_compile">
		<javac srcdir="${src.main}"
			destdir="${tmp.classes}"
			classpathref="classpath"
			debug="on"
			encoding="UTF-8"
			includeantruntime="false"
		/>
		<copy todir="${tmp.classes}">
			<fileset dir="${src.main}">
				<include name="**/*.xml" />
			</fileset>
		</copy>
	</target>
	
	<target name="compile_junit" depends="init_compile, compile_main">
		<javac srcdir="${src.junit}"
			destdir="${tmp.junit}"
			classpath="${lib.cp}:${tmp.classes}:${lib.junit}"
			debug="on"
			encoding="UTF-8"
			includeantruntime="false"
		/>
		<copy todir="${tmp.junit}">
			<fileset dir="${src.junit}">
				<include name="**/*.xml" />
			</fileset>
		</copy>
	</target>
	
	<target name="compile_help1" depends="init_compile, compile_main">
		<javac srcdir="${src.help1}"
			destdir="${tmp.help1}"
			classpath="${lib.cp}:${tmp.classes}"
			debug="on"
			encoding="UTF-8"
			includeantruntime="false"
		/>
		<copy todir="${tmp.help1}">
			<fileset dir="${src.help1}">
				<exclude name="**/*.java" />
				<exclude name="*.java" />
			</fileset>
		</copy>
	</target>
	
	<target name="compile_help2" depends="init_compile, compile_main">
		<javac srcdir="${src.help2}"
			destdir="${tmp.help2}"
			classpath="${lib.cp}:${tmp.classes}"
			debug="on"
			encoding="UTF-8"
			includeantruntime="false"
		/>
		<copy todir="${tmp.help2}">
			<fileset dir="${src.help2}">
				<exclude name="**/*.java" />
				<exclude name="*.java" />
			</fileset>
		</copy>
	</target>
	
	<target name="compile_all" depends="compile_main, compile_junit, compile_help1, compile_help2" />
	
	
	<!-- Archives -->
	
	<target name="jar_test1-1.1" depends="init_jars, compile_help1">
		<jar jarfile="${export.jars}/i5.las2peer.classLoaders.testPackage1-1.0.jar">
			<fileset dir="${tmp.help1}">
				<include name="i5/las2peer/classLoaders/testPackage1/**/*" />
			</fileset>
			<manifest>
				<attribute name="Library-SymbolicName" value="i5.las2peer.classLoaders.testPackage1" />
				<attribute name="Library-Version" value="1.0" />
				<attribute name="Import-Bundle" value="" />
				<attribute name="Library-Name" value="JUNIT TestPackage(1)" />
				<attribute name="Library-Description" value="a simple test package" />
				<attribute name="Import-Library" value="" />
			</manifest>
		</jar>
	</target>
	
	<target name="jar_test1-1.2" depends="init_jars, compile_help2">
		<jar jarfile="${export.jars}/i5.las2peer.classLoaders.testPackage1-1.1.jar">
			<fileset dir="${tmp.help2}">
				<include name="i5/las2peer/classLoaders/testPackage1/**/*" />
			</fileset>
			<manifest>
				<attribute name="Library-SymbolicName" value="i5.las2peer.classLoaders.testPackage1" />
				<attribute name="Library-Version" value="1.1" />
				<attribute name="Import-Bundle" value="" />
				<attribute name="Library-Name" value="JUNIT TestPackage(1)" />
				<attribute name="Library-Description" value="a simple test package" />
				<attribute name="Import-Library" value="" />
			</manifest>
		</jar>
	</target>
	
	<target name="jar_test2-1.0" depends="init_jars, compile_help1">
		<jar jarfile="${export.jars}/i5.las2peer.classLoaders.testPackage2-1.0.jar">
			<fileset dir="${tmp.help1}">
				<include name="i5/las2peer/classLoaders/testPackage2/**/*" />
			</fileset>
			<manifest>
				<attribute name="Library-SymbolicName" value="i5.las2peer.classLoaders.testPackage2" />
				<attribute name="Library-Version" value="1.0" />
				<attribute name="Import-Bundle" value="" />
				<attribute name="Library-Name" value="JUNIT TestPackage(2)" />
				<attribute name="Library-Description" value="a simple test package" />
				<attribute name="Import-Library" value='i5.las2peer.classLoaders.testPackage1;version="[1.1,2.0)"' />
				<attribute name="l2p-Name" value="test2" />
				<attribute name="l2p-Version" value="1.0" />
				<attribute name="l2p-deps" value="test1-(1.1--1.2)" />
			</manifest>
		</jar>
	</target>
	
	<target name="jar_testService1-1.0" depends="init_jars, compile_help1">
		<jar jarfile="${export.jars}/i5.las2peer.testServices.testPackage1-1.0.jar">
			<fileset dir="${tmp.help1}">
				<include name="i5/las2peer/testServices/testPackage1/**/*" />
			</fileset>
			<manifest>
				<attribute name="Library-SymbolicName" value="i5.las2peer.testServices.testPackage1" />
				<attribute name="Library-Version" value="1.0" />
			</manifest>
		</jar>
	</target>
	
	<target name="jar_testService1-1.1" depends="init_jars, compile_help2">
		<jar jarfile="${export.jars}/i5.las2peer.testServices.testPackage1-1.1.jar">
			<fileset dir="${tmp.help2}">
				<include name="i5/las2peer/testServices/testPackage1/**/*" />
			</fileset>
			<manifest>
				<attribute name="Library-SymbolicName" value="i5.las2peer.testServices.testPackage1" />
				<attribute name="Library-Version" value="1.1" />
			</manifest>
		</jar>
	</target>
	
	<target name="jar_testService2-1.0" depends="init_jars, compile_help1">
		<jar jarfile="${export.jars}/i5.las2peer.testServices.testPackage2-1.0.jar">
			<fileset dir="${tmp.help1}">
				<include name="i5/las2peer/testServices/testPackage2/**/*" />
			</fileset>
			<manifest>
				<attribute name="Library-SymbolicName" value="i5.las2peer.testServices.testPackage2" />
				<attribute name="Library-Version" value="1.0" />
			</manifest>
		</jar>
	</target>
	
	<target name="jars" depends="main_jar, test_service_jar, test_service_helper_jar" />
	<target name="junit_jars" depends="jar_test1-1.1, jar_test1-1.2, jar_test2-1.0, jar_testService1-1.0, jar_testService1-1.1, jar_testService2-1.0" />
	
	<target name="main_jar" depends="compile_all">
		<!-- constructs the external libraries classpath name -->
		<pathconvert property="manifest.classpath" refid="classpath" pathsep=" ">
			<mapper><chainedmapper><flattenmapper /></chainedmapper></mapper>
		</pathconvert>
		<jar jarfile="${export.jars}/las2peer.jar">
			<fileset dir="${tmp.classes}">
				<exclude name="i5/las2peer/testing/services/**" />
			</fileset>
			<fileset file="etc/las2peer.policy" />
			<manifest>
				<attribute name="Main-Class" value="${main-class}"/>
				<attribute name="Class-Path" value="${manifest.classpath}" />
				<attribute name="Implementation-Title" value="${main-class}"/>
				<attribute name="Implementation-Version" value="${ivy.las2peer.version}"/> 
				<attribute name="Implementation-Vendor" value="${ivy.organisation}"/>
			</manifest>
		</jar>
		<!-- create snapshot file -->
		<copy file="${export.jars}/las2peer.jar" tofile="${export.jars}/las2peer-${ivy.las2peer.version}.jar"/>
	</target>
	
	<target name="test_service_jar" depends="compile_main">
		<property name="testService.version" value="0.0.1" />
		<jar jarfile="${export.jars}/i5.las2peer.testing.services-${testService.version}.jar">
			<fileset dir="${tmp.classes}" includes="i5/las2peer/testing/services/*" />
			<manifest>
				<attribute name="Library-Version" value="${testService.version}" />
				<attribute name="Library-SymbolicName" value="i5.las2peer.testing.services" />
				<attribute name="Import-Library" value='test_service_helper;version="(0.0.1,1.0)"' />
			</manifest>
		</jar>
	</target>
	
	<target name="test_service_helper_jar" depends="compile_main">
		<property name="testServiceHelper.version" value="0.2" />
		<jar jarfile="${export.jars}/test_service_helper-${testServiceHelper.version}.jar">
			<fileset dir="${tmp.classes}"
				includes="i5/las2peer/testing/services/helperClasses/**" />
			<manifest>
				<attribute name="Library-Version" value="${testServiceHelper.version}" />
				<attribute name="Library-SymbolicName" value="i5.las2peer.testing.services.helperClasses" />
				<attribute name="Import-Library" value="" />
			</manifest>
		</jar>
	</target>
	
	
	<!-- Documentation -->
	
	<target name="javadoc" depends="java_doc, junit_doc" description="--> javadoc"/>
	
	<target name="java_doc" depends="init_doc, compile_main">
        <javadoc destdir="${export.doc}"
			author="true"
			version="true"
			use="true"
			windowtitle="las2peer Documentation"
			failonerror="yes"
			encoding="utf8"
			classpath="${lib.cp}:${tmp.classes}:${lib.junit}"
         >
            <packageset dir="${src.main}" defaultexcludes="yes">
                <include name="i5/las2peer/**" />
            </packageset>		
        </javadoc>
	</target>

	<target name="junit_doc" depends="init_doc, compile_junit">
        <javadoc destdir="${export.junitdoc}"
			author="true"
			version="true"
			use="true"
			windowtitle="las2peer Unit Test Documentation"
			failonerror="yes"
			encoding="utf8"
			classpath="${lib.cp}:${tmp.classes}:${lib.junit}"
         >
        	<packageset dir="${src.junit}" defaultexcludes="yes">
				<include name="i5/las2peer/**" />
			</packageset>
		</javadoc>
	</target>
	
	
	<!-- JUnit Testing -->
	
	<target name="execute.test">

	  <!-- we need to have relative path -->
	  <pathconvert property="test.source.relative">
	    <fileset file="${test.source.absolute}" />
	    <map from="${src.junit}/" to="" />
	  </pathconvert>
		<basename property="filename" file="${test.source.relative}"/>
		<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml" classpathref="classpath"/>
		<jacoco:coverage destfile="${export}/reports/${filename}.exec" xmlns:jacoco="antlib:org.jacoco.ant">
	  <!-- run one particular test -->
			<junit fork="yes" haltonerror="yes" haltonfailure="yes" printsummary="yes">
				
				<classpath>
					<pathelement path="${tmp.classes}" />
				    <pathelement path="${tmp.junit}" />
				    <pathelement path="${lib.cp}" />
				    <pathelement path="${lib.junit}" />
				</classpath>
				
				<formatter type="plain" usefile="false" />
				<formatter type="plain" />
				
				<batchtest todir="${junit.report}">
				  <fileset dir="${src.junit}">
				    <filename name="${test.source.relative}" />
				  </fileset>
				</batchtest>
			</junit>
		</jacoco:coverage>
		

	</target>
	
	<target name="junit" depends="junit_tests, junit_clean" description="-->execute all junit tests" />
	
	<target name="init_junit" depends="init_general">
		<mkdir dir="${junit.report}" />
	</target>
	
	<target name="junit_clean">
		<delete dir="${tmp.junit}" />
	</target>
	
	<target name="junit_tests" depends="init_junit, junit_jars, compile_all">
		<for threadCount="9" parallel="false" param="test.source.absolute">
			<path>
				<fileset dir="${src.junit}">
					<include name="**/*Test.java"/>
					<exclude name="**/SandboxTest.java"/>
					<exclude name="**/ReplicationTest.java"/>
				</fileset>
			</path>
			<sequential>
				<antcall target="execute.test" inheritall="true">
					<param name="target" value="build" />
					<param name="test.source.absolute" value="@{test.source.absolute}" />
				</antcall>
			</sequential>
		</for>
		<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml"  classpathref="classpath"/>
	  	    	        <jacoco:report xmlns:jacoco="antlib:org.jacoco.ant">
	  	    	            <executiondata>
	  	    	            	<fileset dir="${export}/reports/" includes="*.exec"/>
	  	    	            </executiondata>
	  	    	 
	  	    	            <structure name="jacoco">
	  	    	                <classfiles>
	  	    	                    <fileset dir="${tmp.classes}" />
	  	    	                </classfiles>
	  	    	                <sourcefiles encoding="UTF-8">
	  	    	                    <fileset dir="${src.main}" />
	  	    	                </sourcefiles>
	  	    	            </structure>
	  	    	             
	  	    	            <xml destfile="coverage.xml" />
		</jacoco:report>
	</target>
	
	<target name="test_colored" depends="init_general">
		<javac srcdir="${src}"
			includes="**/ColoredOutput.java,**/TestColoredOutput.java"
			destdir="${tmp}"
			debug="on"
			encoding="UTF-8"
			includeantruntime="false" />
		<echo message="Testing colored console output" />
		<java classname="i5.las2peer.tools.TestColoredOutput" classpath="${tmp}" failonerror="true" />
	</target>
	
	<!-- Cleanup -->
	
	<target name="clean" description="--> clean">
		<delete dir="${tmp}" />
		<delete dir="${export}" />
		<delete dir="${lib.dir}" />
	</target>
	
	
	<target name="all" depends="clean, jars, junit, javadoc" description="--> all" />
	
</project>
